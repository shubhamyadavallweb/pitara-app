// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - Vite injects the `env` object at build time
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL ?? "https://jdfnkvbfpvzddjtgiovj.supabase.co";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - Vite injects the `env` object at build time
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY ?? "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpkZm5rdmJmcHZ6ZGRqdGdpb3ZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk3ODE5OTcsImV4cCI6MjA2NTM1Nzk5N30.zHUA-ESeIWzsfEpkt6O7-nWOBLaBf8MCEQlUb2JcnOI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // Use PKCE flow so that Supabase returns an auth code in the query string
    // instead of the access token in a hash fragment. Android deep-linking does
    // not forward URL fragments (#) to the application, so PKCE is required for
    // reliable mobile authentication.
    flowType: 'pkce',

    // Ensure Supabase automatically exchanges the code found in the callback
    // URL for a session. We still have custom deep-link handling logic that
    // covers edge-cases, but enabling this option means that when the app is
    // brought to the foreground via pitara://auth/callback?code=â€¦ Supabase can
    // perform the exchange itself.
    detectSessionInUrl: true,

    // Persist and automatically refresh sessions.
    autoRefreshToken: true,
    persistSession: true,
    // Enhanced debug logging for auth events
    debug: (message) => {
      console.log('Supabase Auth Debug:', message);
    },
    storage: {
      getItem: (key) => {
        try {
          const storedSession = localStorage.getItem(key)
          return storedSession
        } catch (error) {
          console.error('Error getting auth session:', error)
          return null
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, value)
        } catch (error) {
          console.error('Error storing auth session:', error)
        }
      },
      removeItem: (key) => {
        try {
          localStorage.removeItem(key)
        } catch (error) {
          console.error('Error removing auth session:', error)
        }
      },
    },
  },
});

// Add auth state change listener
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase auth event:', event);
  if (session) {
    console.log('User authenticated:', session.user.email);
  }
});